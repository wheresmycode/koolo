<!doctype html>
<html lang="en" data-theme="dark">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="../assets/css/pico.min.css">
    <link rel="stylesheet" href="../assets/css/custom.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <title>Koolo Dashboard</title>
    <style>
        :root {
            --primary: #4a9df8;
            --primary-hover: #3a7dc8;
            --background-color: #1a1d24;
            --card-background-color: #22262e;
            --card-hover-background-color: #2a2f38;
        }
        body { 
            padding: 20px; 
            background-color: var(--background-color);
        }
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            background-color: var(--card-background-color);
            padding: 20px;
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .dashboard-title-container {
            display: flex;
            align-items: center;
        }
        .dashboard-title {
            font-size: 2em;
            margin: 0;
            color: var(--primary);
        }
        .dashboard-controls {
            display: flex;
            gap: 10px;
        }
        .version-badge {
            font-size: 0.8em;
            padding: 4px 8px;
            border-radius: 4px;
            background-color: #dc3545;
            color: #fff;
            margin-left: 10px;
        }
        .character-card {
            background-color: var(--card-background-color);
            border-radius: 6px;
            padding: 15px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .character-card:hover {
            background-color: var(--card-hover-background-color);
            transform: translateY(-2px);
        }
        .character-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .character-name-status {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .character-name {
            font-size: 1.2em;
            font-weight: bold;
            color: var(--primary);
        }
        .character-controls {
            display: flex;
            gap: 8px;
        }
        .character-details {
            margin-top: 15px;
            display: none;
            animation: fadeIn 0.3s ease;
        }
        .character-card.expanded .character-details {
            display: block;
        }
        .toggle-details {
            background: none;
            border: none;
            color: var(--primary);
            cursor: pointer;
            font-size: 1.2em;
            padding: 0;
            transition: transform 0.3s ease;
            outline: none; /* Remove the outline */
        }
        .toggle-details:hover {
            color: var(--primary-hover);
        }
        .toggle-details:focus {
            outline: none; /* Remove the outline on focus */
            box-shadow: none; /* Remove any box shadow on focus */
        }
        .toggle-details i {
            transition: transform 0.3s ease;
            display: inline-block;
        }
        .character-card.expanded .toggle-details i {
            transform: rotate(180deg);
        }
        .status-badge {
            display: inline-flex;
            align-items: center;
            font-size: 0.9em;
            background-color: transparent;
            color: #a0a0a0;
        }
        .status-label {
            margin-right: 5px;
        }
        .status-value {
            font-weight: bold;
            padding: 2px 6px;
            border-radius: 3px;
        }
        .status-ingame .status-value { background-color: #28a745; color: white; }
        .status-paused { background-color: #ffc107; color: black; }
        .status-stopped { background-color: #dc3545; color: white; }
        .status-paused .status-value { background-color: #ffc107; color: black; }
        .status-notstarted .status-value { background-color: #dc3545; color: white; }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin-top: 10px;
        }
        .stat-item {
            background-color: rgba(255, 255, 255, 0.05);
            padding: 10px;
            border-radius: 4px;
            text-align: center;
        }
        .stat-label {
            font-size: 0.8em;
            color: #a0a0a0;
        }
        .stat-value {
            font-size: 1.2em;
            font-weight: bold;
            margin-top: 5px;
        }
        .btn {
            padding: 6px 12px;
            border-radius: 4px;
            font-weight: bold;
            transition: all 0.2s ease;
            border: none;
            cursor: pointer;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        .btn-start { background-color: #28a745; color: white; }
        .btn-start:hover { background-color: #218838; }
        .btn-stop { background-color: #dc3545; color: white; }
        .btn-stop:hover { background-color: #c82333; }
        .btn-pause { background-color: #ffc107; color: black; }
        .btn-pause:hover { background-color: #e0a800; }
        .btn-outline {
            background-color: transparent;
            border: 1px solid var(--primary);
            color: var(--primary);
        }
        .btn-outline:hover {
            background-color: var(--primary);
            color: white;
        }
        .btn-icon {
            margin-right: 5px;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .loading::after {
            content: "";
            width: 50px;
            height: 50px;
            border: 10px solid #f3f3f3;
            border-top: 10px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .run-stats {
            margin-top: 20px;
        }
        .run-stat {
            background-color: rgba(255, 255, 255, 0.05);
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
        }
        .run-stat h4 {
            margin-top: 0;
            color: var(--primary);
        }
        .status-details {
            margin-bottom: 10px;
        }
        .run-stats h3 {
        margin-top: 20px;
        color: var(--primary);
        }
        .run-stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 10px;
        }
        .run-stat {
            background-color: rgba(255, 255, 255, 0.05);
            padding: 15px;
            border-radius: 4px;
        }
        .run-stat p {
            margin: 5px 0;
        }
        .stat-label {
            color: #a0a0a0;
        }
        stat-value {
            color: #ffffff;
            font-weight: bold;
        }
        .run-stat h4 {
            margin-top: 0;
            margin-bottom: 10px;
            color: var(--primary);
        }
        .running-for {
            margin-top: 5px;
            font-size: 0.9em;
            color: #a0a0a0;
        }
        .stat-short { color: #28a745; }
        .stat-long { color: #ffc107; }
        .stat-error { color: #dc3545; }
    </style>
</head>
<body>
<main class="container">
    <div id="loading" class="loading"></div>
    <div id="dashboard" style="display: none;">
        <div class="dashboard-header">
            <div class="dashboard-title-container">
                <h1 class="dashboard-title">Koolo</h1>
                <span id="version" class="version-badge"></span>
            </div>
            <div class="dashboard-controls">
                <button class="btn btn-outline" onclick="location.href='/config'">
                    <i class="bi bi-gear btn-icon"></i>Settings
                </button>
                <button class="btn btn-start" onclick="location.href='/supervisorSettings'">
                    <i class="bi bi-plus btn-icon"></i>Add Character
                </button>
            </div>
        </div>
        <div id="characters-container"></div>
    </div>
</main>

<script>
    let socket;
    let reconnectAttempts = 0;
    const maxReconnectAttempts = 5;
    const reconnectDelay = 3000;

    function connectWebSocket() {
        socket = new WebSocket('ws://' + window.location.host + '/ws');

        socket.onopen = function() {
            console.log('WebSocket connected');
            reconnectAttempts = 0;
        };

        socket.onmessage = function(event) {
            const data = JSON.parse(event.data);
            updateDashboard(data);
        };

        socket.onclose = function() {
            console.log('WebSocket disconnected');
            if (reconnectAttempts < maxReconnectAttempts) {
                setTimeout(connectWebSocket, reconnectDelay);
                reconnectAttempts++;
            } else {
                console.error('Max reconnect attempts reached');
            }
        };
    }

    function fetchInitialData() {
        fetch('/initial-data')
            .then(response => response.json())
            .then(data => {
                updateDashboard(data);
                document.getElementById('loading').style.display = 'none';
                document.getElementById('dashboard').style.display = 'block';
            })
            .catch(error => console.error('Error fetching initial data:', error));
    }

    function updateDashboard(data) {
        const versionElement = document.getElementById('version');
        if (versionElement) {
            versionElement.textContent = data.Version;
            if (data.Version === "dev") {
                versionElement.textContent = "Development Version";
                versionElement.style.backgroundColor = "#dc3545";
            }
        }

        const container = document.getElementById('characters-container');
        if (!container) return;

        if (Object.keys(data.Status).length === 0) {
            container.innerHTML = '<article><p>No characters found, start adding a new character.</p></article>';
            return;
        }

        for (const [key, value] of Object.entries(data.Status)) {
            let card = document.getElementById(`card-${key}`);
            if (!card) {
                card = createCharacterCard(key);
                container.appendChild(card);
            }
            updateCharacterCard(card, key, value, data.DropCount[key]);
        }

        // Remove cards for characters that no longer exist
        Array.from(container.children).forEach(card => {
            if (!data.Status.hasOwnProperty(card.id.replace('card-', ''))) {
                container.removeChild(card);
            }
        });
    }


    function createCharacterCard(key) {
        const card = document.createElement('div');
        card.className = 'character-card';
        card.id = `card-${key}`;

        card.innerHTML = `
            <div class="character-header">
                <div class="character-name">
                    <span>${key}</span>
                </div>
                <div class="character-controls">
                    <button class="btn btn-outline" onclick="location.href='/debug?characterName=${key}'">
                        <i class="bi bi-bug btn-icon"></i>Debug
                    </button>
                    <button class="btn btn-outline" onclick="location.href='/supervisorSettings?supervisor=${key}'">
                        <i class="bi bi-gear btn-icon"></i>Settings
                    </button>
                    <button class="start-pause btn btn-start" data-character="${key}">
                        <i class="bi bi-play-fill btn-icon"></i>Start
                    </button>
                    <button class="stop btn btn-stop" data-character="${key}" style="display:none;">
                        <i class="bi bi-stop-fill btn-icon"></i>Stop
                    </button>
                    <button class="toggle-details">
                        <i class="bi bi-chevron-down"></i>
                    </button>
                </div>
            </div>
            <div class="character-details">
                <div class="status-details">
                    <span class="status-badge"></span>
                </div>
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-label">Games</div>
                        <div class="stat-value runs">0</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">Drops</div>
                        <div class="stat-value drops">None</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">Chickens</div>
                        <div class="stat-value chickens">0</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">Deaths</div>
                        <div class="stat-value deaths">0</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">Errors</div>
                        <div class="stat-value errors">0</div>
                    </div>
                </div>
                <div class="run-stats"></div>
            </div>
        `;

        setupEventListeners(card, key);
        return card;
    }


    function setupEventListeners(card, key) {
        if (!card) return;

        const toggleDetailsBtn = card.querySelector('.toggle-details');
        const startPauseBtn = card.querySelector('.start-pause');
        const stopBtn = card.querySelector('.stop');

        if (toggleDetailsBtn) {
            toggleDetailsBtn.addEventListener('click', function() {
                card.classList.toggle('expanded');
                this.querySelector('i').style.transform = card.classList.contains('expanded') ? 'rotate(180deg)' : 'rotate(0deg)';
                saveExpandedState();
            });
        }

        if (startPauseBtn) {
            startPauseBtn.addEventListener('click', function() {
                const action = this.textContent.trim() === 'Start' ? 'start' : 'togglePause';
                fetch(`/${action}?characterName=${key}`).then(() => fetchInitialData());
            });
        }

        if (stopBtn) {
            stopBtn.addEventListener('click', function() {
                fetch(`/stop?characterName=${key}`).then(() => fetchInitialData());
            });
        }
    }


    function updateStatusPosition(card, isExpanded) {
        if (!card) return;

        const statusBadge = card.querySelector('.status-badge');
        const headerStatusContainer = card.querySelector('.character-name-status');
        const detailsStatusContainer = card.querySelector('.status-details');

        if (!statusBadge || !headerStatusContainer || !detailsStatusContainer) return;

        if (isExpanded) {
            detailsStatusContainer.insertBefore(statusBadge, detailsStatusContainer.firstChild);
        } else {
            headerStatusContainer.appendChild(statusBadge);
        }
    }

    function updateCharacterCard(card, key, value, dropCount) {
        if (!card) return;

        const startPauseBtn = card.querySelector('.start-pause');
        const stopBtn = card.querySelector('.stop');
        const statusDetails = card.querySelector('.status-details');
        const statusBadge = statusDetails.querySelector('.status-badge');

        if (statusBadge && statusDetails) {
            updateStatus(statusBadge, statusDetails, value.SupervisorStatus);
        }
        
        if (startPauseBtn && stopBtn) {
            updateButtons(startPauseBtn, stopBtn, value.SupervisorStatus);
        }
        
        updateStats(card, key, value.Games, dropCount);
        updateRunStats(card, value.Games);
        
        if (statusDetails) {
            updateStartedTime(statusDetails, value.StartedAt);
        }
    }

    function updateStatus(statusBadge, statusDetails, status) {
        if (!statusBadge || !statusDetails) return;

        const statusText = status || 'Not started';
        statusBadge.innerHTML = `<span class="status-label">Status:</span> <span class="status-value">${statusText}</span>`;
        statusBadge.className = `status-badge status-${statusText.toLowerCase().replace(' ', '')}`;
    }

    function updateStartedTime(statusDetails, startedAt) {
        const startTime = new Date(startedAt);
        const now = new Date();
        
        let runningForElement = statusDetails.querySelector('.running-for');
        if (!runningForElement) {
            runningForElement = document.createElement('div');
            runningForElement.className = 'running-for';
            statusDetails.appendChild(runningForElement);
        }
        
        if (startTime.getFullYear() === 1) {
            runningForElement.textContent = 'Running for: N/A';
            return;
        }
        
        const timeDiff = now - startTime;
        if (timeDiff < 0) {
            runningForElement.textContent = 'Running for: N/A';
            return;
        }
        
        const duration = formatDuration(timeDiff);
        runningForElement.textContent = `Running for: ${duration}`;
    }

    function updateButtons(startPauseBtn, stopBtn, status) {
        if (status === "Paused") {
            startPauseBtn.innerHTML = '<i class="bi bi-play-fill btn-icon"></i>Resume';
            startPauseBtn.className = 'start-pause btn btn-pause';
            stopBtn.style.display = 'inline-block';
        } else if (status === "In game" || status === "Starting") {
            startPauseBtn.innerHTML = '<i class="bi bi-pause-fill btn-icon"></i>Pause';
            startPauseBtn.className = 'start-pause btn btn-pause';
            stopBtn.style.display = 'inline-block';
        } else {
            startPauseBtn.innerHTML = '<i class="bi bi-play-fill btn-icon"></i>Start';
            startPauseBtn.className = 'start-pause btn btn-start';
            stopBtn.style.display = 'none';
        }
    }

    function updateStats(card, key, games, dropCount) {
        const stats = calculateStats(games);
        
        card.querySelector('.runs').textContent = stats.totalGames;
        card.querySelector('.drops').innerHTML = dropCount === undefined ? 'None' : 
            (dropCount === 0 ? 'None' : `<a href="/drops?supervisor=${key}">${dropCount}</a>`);
        card.querySelector('.chickens').textContent = stats.totalChickens;
        card.querySelector('.deaths').textContent = stats.totalDeaths;
        card.querySelector('.errors').textContent = stats.totalErrors;
    }


    function updateRunStats(card, games) {
        const runStats = calculateRunStats(games);
        const runStatsElement = card.querySelector('.run-stats');
        runStatsElement.innerHTML = '<h3>Run Statistics</h3>';

        if (Object.keys(runStats).length === 0) {
            runStatsElement.innerHTML += '<p>No run data available yet.</p>';
            return;
        }

        const runStatsGrid = document.createElement('div');
        runStatsGrid.className = 'run-stats-grid';

        for (const [runName, stats] of Object.entries(runStats)) {
            const runElement = document.createElement('div');
            runElement.className = 'run-stat';
            runElement.innerHTML = `
                <h4>${runName}</h4>
                <p><span class="stat-label">Fastest Run:</span> <span class="stat-value">${formatDuration(stats.shortestTime)}</span></p>
                <p><span class="stat-label">Slowest Run:</span> <span class="stat-value">${formatDuration(stats.longestTime)}</span></p>
                <p><span class="stat-label">Average Run:</span> <span class="stat-value">${formatDuration(stats.averageTime)}</span></p>
                <p><span class="stat-label">Errors:</span> <span class="stat-value">${stats.errorCount}</span></p>
                <p><span class="stat-label">Total runs:</span> <span class="stat-value">${stats.runCount}</span></p>
            `;
            runStatsGrid.appendChild(runElement);
        }

        runStatsElement.appendChild(runStatsGrid);
    }

    function calculateRunStats(games) {
        if (!games || games.length === 0) {
            return {};
        }

        const runStats = {};

        games.forEach(game => {
            if (game.Runs && Array.isArray(game.Runs)) {
                game.Runs.forEach(run => {
                    if (!runStats[run.Name]) {
                        runStats[run.Name] = { 
                            shortestTime: Infinity, 
                            longestTime: 0, 
                            totalTime: 0,
                            errorCount: 0, 
                            runCount: 0,
                            successfulRunCount: 0
                        };
                    }

                    const runTime = new Date(run.FinishedAt) - new Date(run.StartedAt);
                    if (run.FinishedAt !== "0001-01-01T00:00:00Z" && runTime > 0) {
                        runStats[run.Name].runCount++;

                        if (run.Reason === 'ok') {
                            runStats[run.Name].shortestTime = Math.min(runStats[run.Name].shortestTime, runTime);
                            runStats[run.Name].longestTime = Math.max(runStats[run.Name].longestTime, runTime);
                            runStats[run.Name].totalTime += runTime;
                            runStats[run.Name].successfulRunCount++;
                        }
                    }

                    if (run.Reason !== 'ok' && run.Reason !== '') {
                        runStats[run.Name].errorCount++;
                    }
                });
            }
        });

        // Calculate average time for successful runs
        for (const stats of Object.values(runStats)) {
            if (stats.successfulRunCount > 0) {
                stats.averageTime = stats.totalTime / stats.successfulRunCount;
            } else {
                stats.shortestTime = 0;
                stats.longestTime = 0;
                stats.averageTime = 0;
            }
        }

        return runStats;
    }

    function calculateStats(games) {
        if (!games || games.length === 0) {
            return { totalGames: 0, totalChickens: 0, totalDeaths: 0, totalErrors: 0 };
        }

        return games.reduce((acc, game) => {
            acc.totalGames++;
            if (game.Reason === 'chicken') acc.totalChickens++;
            else if (game.Reason === 'death') acc.totalDeaths++;
            else if (game.Reason === 'error') acc.totalErrors++;
            return acc;
        }, { totalGames: 0, totalChickens: 0, totalDeaths: 0, totalErrors: 0 });
    } 

    function formatDuration(ms) {
        if (!isFinite(ms) || ms < 0) {
            return 'N/A';
        }
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (days > 0) return `${days}d ${hours % 24}h`;
        if (hours > 0) return `${hours}h ${minutes % 60}m`;
        if (minutes > 0) return `${minutes}m ${seconds % 60}s`;
        return `${seconds}s`;
    }

    function saveExpandedState() {
        const expandedCards = Array.from(document.querySelectorAll('.character-card.expanded'))
            .map(card => card.id);
        localStorage.setItem('expandedCards', JSON.stringify(expandedCards));
    }

    function restoreExpandedState() {
        const expandedCards = JSON.parse(localStorage.getItem('expandedCards')) || [];
        expandedCards.forEach(cardId => {
            const card = document.getElementById(cardId);
            if (card) {
                card.classList.add('expanded');
                const toggleBtn = card.querySelector('.toggle-details i');
                if (toggleBtn) {
                    toggleBtn.style.transform = 'rotate(180deg)';
                }
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
        fetchInitialData();
        connectWebSocket();
        restoreExpandedState();
    });
</script>
</body>
</html>